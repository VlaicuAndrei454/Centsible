// backend/controllers/subscriptionController.js

const Subscription = require("../models/Subscription");
const Expense      = require("../models/Expense"); // make sure this path is correct

// Create a new subscription
exports.addSubscription = async (req, res) => {
  try {
    const { name, amount, startDate, nextBillingDate } = req.body;
    if (!name || !name.trim()) {
      return res.status(400).json({ message: "Subscription name is required" });
    }
    if (amount == null || isNaN(amount) || amount < 0) {
      return res.status(400).json({ message: "A valid amount is required" });
    }
    const sd = new Date(startDate);
    const nb = new Date(nextBillingDate);
    if (isNaN(sd) || isNaN(nb)) {
      return res
        .status(400)
        .json({ message: "Valid startDate and nextBillingDate are required" });
    }

    const subscription = await Subscription.create({
      user:             req.user.id,
      name:             name.trim(),
      amount,
      startDate:        sd,
      nextBillingDate:  nb,
    });

    res.status(201).json(subscription);
  } catch (err) {
    console.error("addSubscription error:", err);
    res.status(500).json({ message: "Server error adding subscription" });
  }
};

// Get all subscriptions for current user
exports.getSubscriptions = async (req, res) => {
  try {
    const subs = await Subscription.find({ user: req.user.id }).sort("-createdAt");
    res.json(subs);
  } catch (err) {
    console.error("getSubscriptions error:", err);
    res.status(500).json({ message: "Server error fetching subscriptions" });
  }
};

// Delete a subscription by ID
exports.deleteSubscription = async (req, res) => {
  try {
    const sub = await Subscription.findOneAndDelete({
      _id: req.params.id,
      user: req.user.id,
    });
    if (!sub) {
      return res.status(404).json({ message: "Subscription not found" });
    }
    res.json({ message: "Subscription deleted", id: sub._id });
  } catch (err) {
    console.error("deleteSubscription error:", err);
    res.status(500).json({ message: "Server error deleting subscription" });
  }
};

// Mark a subscription as paid (create expense + roll date forward)
exports.paySubscription = async (req, res) => {
  try {
    // 1) Find it
    const sub = await Subscription.findOne({
      _id: req.params.id,
      user: req.user.id,
    });
    if (!sub) {
      return res.status(404).json({ message: "Subscription not found" });
    }

    // 2) Create an Expense record
    await Expense.create({
        userId:   req.user.id,
      category: sub.name,
      amount:   sub.amount,
      date:     new Date(),
      icon:     sub.icon || "",    // if you store an icon on subscriptions
    });

    // 3) Advance nextBillingDate by one month
    const next = new Date(sub.nextBillingDate);
    next.setMonth(next.getMonth() + 1);
    sub.nextBillingDate = next;
    await sub.save();

    // 4) Respond
    res.json({ message: "Paid and rolled forward", sub });
  } catch (err) {
    console.error("paySubscription error:", err);
    res.status(500).json({ message: "Server error during payment" });
  }
};
